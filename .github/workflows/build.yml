name: build
on: [push, pull_request]

env:
  APT_DEPS: libzstd-dev samtools tabix libhts-dev pigz python3-pip
  BREW_DEPS: python@3.8 sqlite zstd samtools pigz
  PIP_DEPS: pytest pytest-xdist

jobs:

  lint:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: deps
      run: |
        sudo apt-get install -y clang-format cppcheck python3-pip
        sudo pip3 install --system pre-commit $PIP_DEPS black flake8 pylint
    - name: pre-commit
      run: pre-commit run --all-files
    - name: mvn spotless:check
      run: mvn spotless:check -B -f bindings/jdbc/genomicsqlite-jdbc/pom.xml
    - name: rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        components: rustfmt, clippy
        toolchain: stable
        default: true
    - name: rust lint
      run: |
        cd bindings/rust
        ./cargo check --no-default-features
        ./cargo fmt -- --check

  test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        BUILD_TYPE: [Debug, Release]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: deps
      run: |
        sudo apt-get install -y $APT_DEPS
        sudo pip3 install --system $PIP_DEPS
    - name: rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
    - name: build
      run: cmake -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} -B build . && cmake --build build -j $(nproc)
    - name: test
      run: env -C build ctest -V

  linux-so:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: build loaders
      run: |
        sudo apt-get install -y $APT_DEPS
        sudo pip3 install --system $PIP_DEPS
        cmake -DCMAKE_BUILD_TYPE=Release -B build . && cmake --build build -j $(nproc)
        rm build/libgenomicsqlite.so
        sudo apt-get remove -y libzstd-dev  # should be linked into libgenomicsqlite.so
    - name: build portable .so in docker
      run: docker build -t genomicsqlite . && docker run -v $(pwd):/mnt --rm genomicsqlite cp build/libgenomicsqlite.so /mnt/build/
    - name: ldd
      run: |
        docker run genomicsqlite ldd -v -r build/libgenomicsqlite.so
        echo "----"
        ldd -v -r build/libgenomicsqlite.so
    - name: rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
    - name: test portable .so
      run: env -C build ctest -V
    - name: test rust crate
      run: |
        set -e
        cp build/libgenomicsqlite.so bindings/rust
        bindings/rust/cargo test --release
        bindings/rust/cargo package --list | grep libgenomicsqlite.so
    - name: prepare artifacts
      run: cp build/libgenomicsqlite.so include/genomicsqlite.h .
    - uses: actions/upload-artifact@v2
      with:
        name: libgenomicsqlite.so
        path: libgenomicsqlite.so

  macOS-dylib:
    runs-on: macOS-10.15
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: dependencies
      run: |
        brew update
        brew upgrade
        brew install $BREW_DEPS
        /usr/local/bin/pip3 install $PIP_DEPS
    - name: rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
    - name: build environment
      run: |
        echo "PREFIX=$(brew --prefix)" >> $GITHUB_ENV
        echo "PATH=${PREFIX}/opt/python/libexec/bin:${PREFIX}/opt/sqlite/bin:${PATH}" >> $GITHUB_ENV
        echo "CFLAGS=-I$(brew --prefix)/include -I$(brew --prefix)/opt/sqlite/include -march=sandybridge" >> $GITHUB_ENV
        echo "CXXFLAGS=-I$(brew --prefix)/include -march=sandybridge" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix)/lib -L$(brew --prefix)/opt/sqlite/lib" >> $GITHUB_ENV
        # used by rusqlite:
        echo "SQLITE3_INCLUDE_DIR=$(brew --prefix)/opt/sqlite/include" >> $GITHUB_ENV
        echo "SQLITE3_LIB_DIR=$(brew --prefix)/opt/sqlite/lib" >> $GITHUB_ENV
    - name: build
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_PREFIX_PATH=$(brew --prefix)/opt/sqlite \
              -B build .
        cmake --build build -j 4
    - name: otool
      run: otool -L build/libgenomicsqlite.dylib
    - name: ctest
      run: |
        cd build
        otool -L test/capi_smoke_test
        ctest -V
    - name: test rust crate
      run: |
        set -e
        cp build/libgenomicsqlite.dylib bindings/rust
        bindings/rust/cargo test --release
        bindings/rust/cargo package --list | grep libgenomicsqlite.dylib
    - name: prepare artifacts
      run: cp build/libgenomicsqlite.dylib include/genomicsqlite.h .
    - uses: actions/upload-artifact@v2
      with:
        name: libgenomicsqlite.dylib
        path: libgenomicsqlite.dylib

  artifacts:
    runs-on: ubuntu-20.04
    needs: [linux-so, macOS-dylib]
    steps:
    - uses: actions/checkout@v2
    - name: fetch libgenomicsqlite.so
      uses: actions/download-artifact@v2
      with:
        name: libgenomicsqlite.so
    - name: fetch libgenomicsqlite.dylib
      uses: actions/download-artifact@v2
      with:
        name: libgenomicsqlite.dylib
    - name: detect GIT_REVISION
      run: |
        cp include/genomicsqlite.h .
        echo "GIT_REVISION=$(git describe --tags --always)" >> $GITHUB_ENV
    - uses: actions/upload-artifact@v2
      with:
        name: GenomicSQLite-${{ env.GIT_REVISION }}
        path: |
          LICENSE
          genomicsqlite.h
          libgenomicsqlite.so
          libgenomicsqlite.dylib
    - name: build jar
      run: |
        cp libgenomicsqlite.so libgenomicsqlite.dylib bindings/jdbc/genomicsqlite-jdbc/src/main/resources/
        mvn deploy -Drevision=${{ env.GIT_REVISION }} -B -f bindings/jdbc/genomicsqlite-jdbc/pom.xml
    - uses: actions/upload-artifact@v2
      with:
        name: genomicsqlite-jdbc-${{ env.GIT_REVISION }}
        path: bindings/jdbc/genomicsqlite-jdbc/target/mvn-repo
